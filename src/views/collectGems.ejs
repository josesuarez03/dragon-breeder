<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aframe-physics-system@1.4.0/dist/aframe-physics-system.min.js"></script>
    <script src="https://unpkg.com/aframe-extras@6.1.1/dist/aframe-extras.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <title>Dragon Gem Collector</title>
    <style>
        #game-overlay {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 10px;
            z-index: 1000;
        }
        #game-score, #game-timer {
            font-size: 1.2em;
            margin: 5px 0;
        }
        #start-game-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        #start-button {
            padding: 20px 40px;
            font-size: 1.5em;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        #start-button:hover {
            background-color: #45a049;
            transform: scale(1.05);
        }
        #back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1500;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 10px;
            font-size: 1.2em;
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        #back-button:hover {
            background: rgba(0, 0, 0, 0.9);
        }
        #back-button i {
            margin-right: 8px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div id="start-game-overlay">
        <button id="start-button">Iniciar Juego</button>
    </div>

    <a href="/game" id="back-button">
        <i class="bi bi-arrow-left"></i>
        Volver al Inicio
    </a>

    <div id="game-overlay">
        <div id="game-score">Score: 0</div>
        <div id="game-timer">Time: 30s</div>
    </div>
    
    <a-scene physics="debug: false">
        <!-- Camera/Dragon Player with boundary controls and physics -->
        <a-entity id="rig" 
                  position="0 1.6 0" 
                  player-movement 
                  kinematic-body 
                  boundary-controls="width: 50; depth: 50; margin: 1">
            <a-entity id="player-camera" 
                      camera 
                      look-controls 
                      position="0 0 0">
                <a-entity 
                    id="dragon-head" 
                    position="0 -0.5 -1" 
                    geometry="primitive: box; width: 0.2; height: 0.2; depth: 0.3" 
                    material="color: red"
                    dynamic-body>
                </a-entity>
            </a-entity>
        </a-entity>

        <!-- Gemas (serán generadas dinámicamente) -->
        <a-entity id="gems"></a-entity>
    
        <!-- Terreno con límites visibles -->
        <a-plane 
            static-body 
            rotation="-90 0 0" 
            width="50" 
            height="50" 
            color="#7BC8A4">
        </a-plane>
        
        <!-- Límites del terreno -->
        <a-box position="25 0.5 0" scale="0.1 1 50" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="-25 0.5 0" scale="0.1 1 50" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="0 0.5 25" scale="50 1 0.1" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="0 0.5 -25" scale="50 1 0.1" color="#4a6b50" opacity="0.5" static-body></a-box>

        <!-- Iluminación -->
        <a-light type="ambient" color="#FFF" intensity="0.5"></a-light>
        <a-light type="directional" color="#FFF" intensity="1" position="-1 1 1"></a-light>

        <!-- Sky -->
        <a-sky color="#ECECEC"></a-sky>
    </a-scene>

    <script>
        // Movimiento del jugador
        AFRAME.registerComponent('player-movement', {
            init: function() {
                const el = this.el;
                this.keyPressed = {};
                window.addEventListener('keydown', (e) => this.keyPressed[e.key.toLowerCase()] = true);
                window.addEventListener('keyup', (e) => this.keyPressed[e.key.toLowerCase()] = false);
                this.speed = 0.1;
            },
            tick: function() {
                const position = this.el.getAttribute('position');
                let moveX = 0, moveZ = 0;

                if (this.keyPressed['arrowleft'] || this.keyPressed['a']) moveX -= this.speed;
                if (this.keyPressed['arrowright'] || this.keyPressed['d']) moveX += this.speed;
                if (this.keyPressed['arrowup'] || this.keyPressed['w']) moveZ -= this.speed;
                if (this.keyPressed['arrowdown'] || this.keyPressed['s']) moveZ += this.speed;

                const halfWidth = 24.5, halfDepth = 24.5;
                const newX = Math.max(-halfWidth, Math.min(halfWidth, position.x + moveX));
                const newZ = Math.max(-halfDepth, Math.min(halfDepth, position.z + moveZ));

                this.el.setAttribute('position', { x: newX, y: position.y, z: newZ });
            }
        });

        // Detector de colisiones
        AFRAME.registerComponent('collision-detector', {
            init: function () {
                const el = this.el;
                el.addEventListener('collide', (e) => {
                    const target = e.detail.body.el;
                    if (target && target.classList.contains('collectible')) {
                        const scoreElement = document.getElementById('game-score');
                        const points = parseInt(target.getAttribute('gems'));
                        const currentScore = parseInt(scoreElement.textContent.split(': ')[1]);
                        scoreElement.textContent = `Score: ${currentScore + points}`;
                        target.parentNode.removeChild(target);
                    }
                });
            }
        });

        // Lógica del juego
        document.addEventListener('DOMContentLoaded', () => {
            const startGameOverlay = document.getElementById('start-game-overlay');
            const startButton = document.getElementById('start-button');
            const gameTimer = document.getElementById('game-timer');
            const gemsContainer = document.getElementById('gems');
            let timeLeft = 30;

            function generateGems() {
                const gemTypes = [
                    { color: 'blue', points: 10 },
                    { color: 'green', points: 15 }
                ];

                for (let i = 0; i < 2; i++) {
                    const gem = document.createElement('a-sphere');
                    const gemType = gemTypes[i];
                    const x = Math.random() * 40 - 20;
                    const z = Math.random() * 40 - 20;

                    gem.setAttribute('position', `${x} 0.5 ${z}`);
                    gem.setAttribute('radius', '0.5');
                    gem.setAttribute('color', gemType.color);
                    gem.setAttribute('gems', gemType.points);
                    gem.setAttribute('dynamic-body', 'mass: 0');
                    gem.setAttribute('class', 'collectible');

                    gemsContainer.appendChild(gem);
                }
            }

            function startTimer() {
                const timerInterval = setInterval(() => {
                    timeLeft--;
                    gameTimer.textContent = `Time: ${timeLeft}s`;

                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        alert('¡Fin del juego!');
                    }
                }, 1000);
            }

            startButton.addEventListener('click', () => {
                startGameOverlay.style.display = 'none';
                generateGems();
                startTimer();
            });
        });
    </script>
</body>
</html>
