<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aframe-physics-system@4.0.1/dist/aframe-physics-system.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-JH6NCBXRDB"></script>
    <title>Dragon Gem Collector</title>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        gtag('config', 'G-JH6NCBXRDB');
    </script>
    <style>
        #game-overlay {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 10px;
            z-index: 1000;
        }
        #game-score, #game-timer {
            font-size: 1.2em;
            margin: 5px 0;
        }
        #start-game-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        #start-button {
            padding: 20px 40px;
            font-size: 1.5em;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        #start-button:hover {
            background-color: #45a049;
            transform: scale(1.05);
        }
        #back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1500;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 10px;
            font-size: 1.2em;
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        #back-button:hover {
            background: rgba(0, 0, 0, 0.9);
        }
        #back-button i {
            margin-right: 8px;
            font-size: 1.2em;
        }
        #game-over-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }
        #game-over-overlay div {
            text-align: center;
            color: white;
            padding: 20px;
        }
        #restart-button {
            padding: 10px 20px;
            font-size: 1.2em;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        #restart-button:hover {
            background-color: #45a049;
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div id="start-game-overlay">
        <button id="start-button">Iniciar Juego</button>
    </div>

    <a href="/game" id="back-button">
        <i class="bi bi-arrow-left"></i>
        Volver al Inicio
    </a>

    <div id="game-overlay">
        <div id="game-score">Score: 0</div>
        <div id="game-timer">Time: 30s</div>
    </div>
    
    <a-scene physics="debug: true">
        <a-entity id="rig" position="0 1 0" 
                  movement-controls="speed: 5" 
                  kinematic-body>
            <a-entity id="player-camera" 
                      camera 
                      position="0 1.6 0" 
                      look-controls="enabled: false"
                      collect-gems>
                <a-box id="dragon" 
                       position="0 -1 -1" 
                       geometry="primitive: box; depth: 0.5; height: 0.5; width: 0.5" 
                       material="color: red"
                       static-body>
                </a-box>
            </a-entity>
        </a-entity>
    
        <!-- Gems -->
        <a-entity id="gems"></a-entity>
    
        <!-- Terrain -->
        <a-plane static-body rotation="-90 0 0" width="50" height="50" color="#7BC8A4"></a-plane>
        
        <!-- Terrain Boundaries -->
        <a-box position="25 0.5 0" scale="0.1 1 50" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="-25 0.5 0" scale="0.1 1 50" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="0 0.5 25" scale="50 1 0.1" color="#4a6b50" opacity="0.5" static-body></a-box>
        <a-box position="0 0.5 -25" scale="50 1 0.1" color="#4a6b50" opacity="0.5" static-body></a-box>

        <!-- Lighting -->
        <a-light type="ambient" color="#FFF" intensity="0.5"></a-light>
        <a-light type="directional" color="#FFF" intensity="1" position="-1 1 1"></a-light>

        <!-- Sky -->
        <a-sky color="#ECECEC"></a-sky>
    </a-scene>

    <div id="game-over-overlay">
        <div>
            <h1>Game Over</h1>
            <p id="final-score">Score: 0</p>
            <button id="restart-button">Reiniciar</button>
        </div>
    </div>

    <script>
        let score = 0;
        
        // Mejorar detección de colisiones
        AFRAME.registerComponent('collect-gems', {
            init: function () {
                console.log('Collect Gems Component Initialized');
                
                // Agregar evento de colisión específicamente a la cámara
                this.el.addEventListener('collide', (event) => {
                    // Imprimir detalles de la colisión para depuración
                    console.log('Collision Details:', event.detail);
                    
                    // Verificar si hay un cuerpo colisionado
                    const collidedEl = event.detail.body.el;
                    
                    if (collidedEl && collidedEl.classList.contains('collectible')) {
                        const points = parseInt(collidedEl.getAttribute('gems'), 10);
                        
                        // Aumentar el score
                        score += points;
                        document.getElementById('game-score').textContent = `Score: ${score}`;
                        
                        console.log(`Gem collected! +${points} points`);
                        
                        // Eliminar la gema
                        collidedEl.parentNode.removeChild(collidedEl);
                    }
                });
            }
        });
    
        document.addEventListener('DOMContentLoaded', () => {
            const startGameOverlay = document.getElementById('start-game-overlay');
            const startButton = document.getElementById('start-button');
            const gameOverOverlay = document.getElementById('game-over-overlay');
            const restartButton = document.getElementById('restart-button');
            const gameTimer = document.getElementById('game-timer');
            const finalScoreDisplay = document.getElementById('final-score');
            const gemsContainer = document.getElementById('gems');
            let timeLeft = 30;
            let timerInterval;
    
            function generateGems() {
                const gemTypes = [
                    { color: 'blue', points: 10 },
                    { color: 'green', points: 15 },
                    { color: 'purple', points: 20 }
                ];
    
                // Añadir un número aleatorio de gemas (entre 3-5)
                const gemCount = Math.floor(Math.random() * 3) + 3;
    
                for (let i = 0; i < gemCount; i++) {
                    const gem = document.createElement('a-sphere');
                    const gemType = gemTypes[Math.floor(Math.random() * gemTypes.length)];
                    const x = Math.random() * 40 - 20;
                    const z = Math.random() * 40 - 20;
    
                    gem.setAttribute('position', `${x} 0.5 ${z}`);
                    gem.setAttribute('radius', '0.5');
                    gem.setAttribute('color', gemType.color);
                    gem.setAttribute('gems', gemType.points);
                    gem.setAttribute('class', 'collectible');
                    
                    // Configuración física mejorada
                    gem.setAttribute('dynamic-body', 'mass: 1; shape: sphere');
                    gem.setAttribute('ammo-body', 'type: dynamic; emitCollisionEvents: true');
    
                    gemsContainer.appendChild(gem);
                }
            }
    
            function startTimer() {
                timerInterval = setInterval(() => {
                    timeLeft--;
                    gameTimer.textContent = `Time: ${timeLeft}s`;
    
                    // Generar nuevas gemas cada 5 segundos
                    if (timeLeft % 5 === 0) {
                        generateGems();
                    }
    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        gameOverOverlay.style.display = 'flex';
                        finalScoreDisplay.textContent = `Score: ${score}`;
                    }
                }, 1000);
            }
    
            function resetGame() {
                score = 0;
                timeLeft = 30;
                gameOverOverlay.style.display = 'none';
                gemsContainer.innerHTML = '';
                document.getElementById('game-score').textContent = `Score: ${score}`;
                document.getElementById('game-timer').textContent = `Time: ${timeLeft}s`;
                generateGems();
                startTimer();
            }
    
            startButton.addEventListener('click', () => {
                startGameOverlay.style.display = 'none';
                generateGems();
                startTimer();
            });
    
            restartButton.addEventListener('click', resetGame);
        });
    </script>
</body>
</html>